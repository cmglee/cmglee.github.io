<!DOCTYPE html>
<html>
 <head>
  <title>Steel-pan Simulator by CMG Lee</title>
  <style type="text/css">
*    { touch-action:manipulation; }
body { background:#666; }
svg  { position:fixed; top:0; left:0; height:100%; width:100% }
  </style>
 </head>
 <body>

<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink"
     width="100%" height="100%" viewBox="-256 -256 512 512">
 <title>Steel-pan Simulator by CMG Lee</title>
 <style type="text/css">
svg             { font-family:Helvetica,Arial,sans-serif; font-size:36px;
                  text-anchor:middle; fill:#000; }
text            { stroke:none; pointer-events:none; }
text::selection { background:none; }
.note>text      { letter-spacing:-2px; }
.note>ellipse   { fill:url(#gradNote); }
 </style>
 <defs>
  <radialGradient id="gradNote" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
   <stop offset="50%" stop-color="#fff"/>
   <stop offset="90%" stop-color="#999"/>
  </radialGradient>
  <circle id="pan" cx="0" cy="0" r="255"/>
  <clipPath id="clipPan">
   <use xlink:href="#pan"/>
  </clipPath>
 </defs>
 <use xlink:href="#pan" fill="url(#gradNote)" stroke="#ccc"/>
 <g id="notes" clip-path="url(#clipPan)"></g>
 <text id="debug"></text>
 <script type="text/ecmascript"><![CDATA[ /// so needn't use &lt; for < etc
  const audioContext = new AudioContext();
  function playNotes(frequencys, durations, type='triangle') {
   const oscillator = audioContext.createOscillator();
   const gain       = audioContext.createGain();
   var   now        = audioContext.currentTime;
   oscillator.connect(gain).connect(audioContext.destination);
   oscillator.type = type;
   if (frequencys.constructor !== Array) { frequencys = [frequencys]; }
   if (durations .constructor !== Array) { durations  = [durations ]; }
   var duration;
   for (var i = 0; i < frequencys.length; ++i) {
    var frequency = frequencys[i];
    if (i < durations.length) { duration = durations[i]; }
    if (duration > 0) { /// avoid click if last note is not played
     gain.gain.exponentialRampToValueAtTime(
      Math.min(1, Math.sqrt(110 / frequency)) *
      (type == 'sawtooth' ? 0.25 : type == 'square' ? 0.5 : 1), now);
     gain.gain.exponentialRampToValueAtTime(1e-3, now + duration - 1e-3);
    }
    oscillator.frequency.exponentialRampToValueAtTime(frequency, now);
    now += duration;
   }
   oscillator.start();
   oscillator.stop(now);
  }
  function play(frequency, isOnTouch) {
   if (isOnTouch) { isTouchDevice = true; }
   /// Avoid triggering on both onmousedown and ontouchstart
   if (isOnTouch || !isTouchDevice) { playNotes([frequency], [1]); }
   // document.getElementById('debug').innerHTML =
   //  frequency.toFixed(0) + ',' + (new Date()).getTime() % 1e3;
  }
  var   isTouchDevice = false;
  var   frequency     = 440 / Math.pow(2, 0.75); /// concert middle-C
  const outNotes      = [];
  const labelNotes    = ['C','C#','D','Eb','E','F','F#','G','Ab','A','Bb','B'];
  const labelRings    = ['', '&#8242;', '&#8243;'];
  const dataRingss    = [
   {'nNote':12,'rxNote':59,'ryNote':50,'rRing':230,'step':7},
   {'nNote':12,'rxNote':36,'ryNote':40,'rRing':140,'step':7},
   {'nNote': 5,'rxNote':34,'ryNote':40,'rRing': 61,'step':3},
  ];
  for (let iRing = 0; iRing < dataRingss.length; ++iRing) {
   const dataRings = dataRingss[iRing];
   const nNote     = dataRings['nNote'];
   for (let iNote = 0; iNote < nNote; ++iNote) {
    const deg   = (360.0 * (iNote * dataRings['step']) /
                   nNote).toFixed(0) % 360;
    const label = labelNotes[iNote].replace('#', '&#9839;').
                   replace('b', '&#9837;') + labelRings[iRing];
    // console.log(iRing, iNote, deg);
    outNotes.push(`
<g class="note" transform="rotate(-${deg}) translate(0,${dataRings['rRing']})"
                ontouchstart="play(${frequency}, true );"
                onmousedown ="play(${frequency}, false);">
 <ellipse rx="${dataRings['rxNote']}" ry="${dataRings['ryNote']}"/>
 <text transform="rotate(${deg})" y="0.7ex">${label}</text>
</g>`);
    frequency *= Math.pow(2, 1.0 / 12);
   }
  }
  document.getElementById('notes').innerHTML = outNotes.join();
 ]]></script>
</svg>

 </body>
</html>
