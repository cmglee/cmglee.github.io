<!DOCTYPE html>
<html>
 <head>
  <title>CUSPS steel-pan simulator by CMG Lee</title>
  <style type="text/css">
*    { touch-action:pinch-zoom; }
body { background:#567; }
svg  { position:fixed; top:0; left:0; height:100%; width:100% }
  </style>
 </head>
 <body>

<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink"
     width="100%" height="100%" viewBox="-176 -99 352 198">
 <style type="text/css">
svg             { font-family:Georgia,Cambria,serif;
                  font-size:16px; text-anchor:middle; stroke-width:0.2; }
text            { stroke:none; pointer-events:none; }
text::selection { background:none; }
.note, .button  { cursor:pointer; }
.note>text      { letter-spacing:-1px; }
.note>ellipse   { fill:url(#grad_note); }
.switch         { font-weight:bold; font-size:75%; text-transform:capitalize; }
.white          { fill:#eee; }
.grey           { fill:#ccc; }
.black          { fill:#999; }
 </style>
 <defs>
  <radialGradient id="grad_note" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
   <stop offset="50%" stop-color="#fff"/>
   <stop offset="90%" stop-color="#ccc"/>
  </radialGradient>
  <radialGradient id="grad_active" cx="50%" cy="50%" r="75%" fx="50%" fy="50%">
   <stop offset="50%" stop-color="#ff6"/>
   <stop offset="90%" stop-color="#f90"/>
  </radialGradient>
  <rect id="button" class="button"
        x="-28" y="-6" width="56" height="12" rx="6" ry="6"/>
  <g id="rotate" class="button">
   <circle r="9" fill="#699"/>
   <text y="0.7ex">&#10551;</text>
  </g>
 </defs>
 <g id="main" transform="rotate(0)"></g>
 <text id="debug"></text>
 <script type="text/ecmascript"><![CDATA[ /// so needn't use &lt; for < etc
  const log = console.log;
  /// PLAY SOUND
  const audioContext = new AudioContext();
  function playNotes(frequencys, durations, type='triangle') {
   const oscillator = audioContext.createOscillator();
   const gain       = audioContext.createGain();
   var   now        = audioContext.currentTime;
   oscillator.connect(gain).connect(audioContext.destination);
   oscillator.type = type;
   if (frequencys.constructor !== Array) { frequencys = [frequencys]; }
   if (durations .constructor !== Array) { durations  = [durations ]; }
   var duration;
   for (var i = 0; i < frequencys.length; ++i) {
    var frequency = frequencys[i];
    if (i < durations.length) { duration = durations[i]; }
    if (duration > 0) { /// avoid click if last note is not played
     gain.gain.exponentialRampToValueAtTime(
      Math.min(1, Math.sqrt(110 / frequency)) *
      (type == 'sawtooth' ? 0.25 : type == 'square' ? 0.5 : 1), now);
     gain.gain.exponentialRampToValueAtTime(1e-3, now + duration - 1e-3);
    }
    oscillator.frequency.exponentialRampToValueAtTime(frequency, now);
    now += duration;
   }
   oscillator.start();
   oscillator.stop(now);
  }
  var isTouchDevice = false;
  function play(hertz, isOnTouch, self_) {
   self_.event.target.style.stroke = '#000';
   (function(el) { setTimeout(function() { el.style.stroke = "none"; }, 1e2); })
    (self_.event.target); /// closure as self_ lost when timeout runs
   if (isOnTouch) { isTouchDevice = true; }
   /// Avoid triggering on both onmousedown and ontouchstart
   if (isOnTouch || !isTouchDevice) {
    playNotes([hertz], [Math.sqrt(2 * hertzC4 / hertz)]);
   }
   // document.getElementById('debug').innerHTML =
   //  hertz.toFixed(0) + ',' + (new Date()).getTime() % 1e3;
  }
  /// MAKE INSTRUMENTS
  function noteToHertz(note) {
   return Math.pow(2, tones.indexOf(note.slice(0, -1)) / 12.0 +
                      parseInt(note.slice(-1)) - 4) * hertzC4;
  }
  function noteToLabel(note, octaveMin) {
   return note.slice(0, -1).replace('#', '&#9839;').replace('b', '&#9837;') +
          octaves[parseInt(note.slice(-1)) - octaveMin];
  }
  function makePianoNote(note, octaveMin, xNote, yNote, wNote, hNote, clas) {
   const hertz      = note === null ?  0 : noteToHertz(note);
   const outCommand = note === null ? '' : `
                ontouchstart="play(${hertz}, true , self);"
                onmousedown ="play(${hertz}, false, self);"`;
   const outLabel   = note === null ? '' : `
 <text x="-1" y="0.7ex">${noteToLabel(note, octaveMin)}</text>`;
   return `
<g class="note" transform="translate(${xNote},${yNote})"${outCommand}>
 <rect class="${clas}" x="${-wNote / 2}" y="${wNote / 2 - hNote}"
       width="${wNote}" height="${hNote}" rx="3" ry="3"/>${outLabel}
</g>`
  }
  function makePanNote(note, octaveMin, xyPan, rxNote, ryNote, rRing, deg) {
   const hertz      = note === null ?  0 : noteToHertz(note);
   const outCommand = note === null ? '' : `
                ontouchstart="play(${hertz}, true , self);"
                onmousedown ="play(${hertz}, false, self);"`;
   const outLabel   = note === null ? '' : `
 <text transform="rotate(${deg})" x="-1" y="0.7ex">${noteToLabel(note,
                                                      octaveMin)}</text>`;
   return `
<g class="note" transform="translate(${xyPan}) rotate(${-deg})
                           translate(0,${rRing})"${outCommand}>
 <ellipse rx="${rxNote}" ry="${ryNote}"/>${outLabel}
</g>`
  }
  function makePan(panss, ringss, octaveMin) {
   const outs = [];
   for (let iPan = 0; iPan < panss.length; ++iPan) {
    const pans   = panss[iPan];
    const notess = pans['notes'];
    for (let iRing = notess.length - 1; iRing >= 0; --iRing) {
     const notes = notess[iRing];
     for (let iNote = 0; iNote < notes.length; ++iNote) {
      outs.push(makePanNote(notes[iNote], octaveMin, pans['xy'],
                ringss[iRing]['rx'], ringss[iRing]['ry'],
                ringss[iRing]['r'], 360.0 * iNote / notes.length));
     }
    }
   }
   return outs.join();
  }
  function makeTenor() {
   return makePan([{'xy':'0,0','notes':[
     ['C4','G4','D4','A4','E4','B4','F#4','C#4','Ab4','Eb4','Bb4','F4'],
     ['C5','G5','D5','A5','E5','B5','F#5','C#5','Ab5','Eb5','Bb5','F5'],
     ['C6',     'D6',     'E6',           'C#6',      'Eb6'           ],
     [null]]}], [
    {'rx':22,'ry':15,'r':84},
    {'rx':14,'ry':15,'r':54},
    {'rx':13,'ry':15,'r':24},
    {'rx':99,'ry':99,'r': 0},
   ], 4) + `
  <use xlink:href="#rotate" transform="translate(-88,-88)"
                            onmousedown="rotate(false)"/>
  <use xlink:href="#rotate" transform="translate( 88,-88) scale(-1,1)"
                            onmousedown="rotate(true)"/>`;
  }
  function makeSecond() {
   return makePan([
    {'xy'   :'-88,-4',
     'notes':[['F#3','Bb3','F#4','C4' ,'Ab4','E4' ,'Ab3','D4' ],
              ['Bb4','F#5','C5' ,'Ab5','E5' ,'D5'], ['Bb5'], [null]]},
    {'xy'   :' 88,-4',
     'notes':[['F3' ,'A3' ,'F4' ,'B3' ,'G4' ,'Eb4','G3' ,'C#4'],
              ['A4' ,'F5' ,'B4','G5' ,'Eb5','C#5'], ['A5' ], [null]]},
   ], [
    {'rx':28,'ry':18,'r':70},
    {'rx':18,'ry':18,'r':35},
    {'rx':18,'ry':18,'r': 0},
    {'rx':88,'ry':88,'r': 0},
   ], 3);
  }
  function makeGuitar() {
   return makePan([
    {'xy'   :'-88,-4',
     'notes':[['D3' ,'Ab3','D4' ,'B3' ,'F3' ,'C#4','A3' ], ['F4' ], [null]]},
    {'xy'   :' 88,-4',
     'notes':[['Eb3','F#3','Eb4','Bb3','E3' ,'C4' ,'G3' ], ['E4' ], [null]]},
   ], [
    {'rx':24,'ry':30,'r':58},
    {'rx':28,'ry':28,'r': 0},
    {'rx':88,'ry':88,'r': 0},
   ], 3);
  }
  function makeBass() {
   return makePan([
    {'xy':' -52.2,-45','notes':[['Ab2','Ab3','C3' ,'E3' ],['C4' ],[null]]},
    {'xy':'  52.2,-45','notes':[['G2' ,'G3' ,'B2' ,'Eb3'],['B3' ],[null]]},
    {'xy':'-122.5, 32','notes':[['F#2','F#3','Bb2','D3' ],['Bb3'],[null]]},
    {'xy':' 122.5, 32','notes':[['F2' ,'F3' ,'A2' ,'C#3'],['A3' ],[null]]},
   ], [
    {'rx':29,'ry':18,'r':34},
    {'rx':16,'ry':16,'r': 0},
    {'rx':52,'ry':52,'r': 0},
   ], 2);
  }
  function makeKalimba() {
   const outs   = [];
   const wNote  = 19.5;
   const shades = [1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,1];
   const notes  = ['D5','B4','G4','E4','C4','A3','F3','D3','C3',
                   'E3','G3','B3','D4','F4','A4','C5','E5'];
   for (let iNote = 0; iNote < notes.length; ++iNote) {
    if (notes[iNote].length > 0) {
     const hNote = (15 - Math.abs(iNote - 7.75)) * 10;
     outs.push(makePianoNote(notes[iNote], 3,
      (iNote - (notes.length - 1) / 2.0) * (wNote + 1),
      hNote - 90,
      wNote, hNote, shades[iNote] == 1 ? 'white' : 'grey'));
    }
   }
   return outs.join('');
  }
  function makePiano() {
   const outs   = [];
   const wNote  = 22;
   const hNote  = 77;
   const notess = [
   ['C2','D2','E2','F2','G2','A2','B2','C3','D3','E3','F3','G3','A3','B3','C4'],
   ['C#2','Eb2','','F#2','Ab2','Bb2','','C#3','Eb3','','F#3','Ab3','Bb3'],
   ['C4','D4','E4','F4','G4','A4','B4','C5','D5','E5','F5','G5','A5','B5','C6'],
   ['C#4','Eb4','','F#4','Ab4','Bb4','','C#5','Eb5','','F#5','Ab5','Bb5'],
   ];
   for (let iRow = 0; iRow < notess.length; ++iRow) {
    const notes = notess[iRow];
    for (let iNote = 0; iNote < notes.length; ++iNote) {
     if (notes[iNote].length > 0) {
      const isWhite = iRow % 2 == 0;
      outs.push(makePianoNote(notes[iNote], 2,
       (iNote - (notess[0].length - (isWhite ? 1 : 2)) / 2.0) * (wNote + 1),
       (1 - iRow / 2.0) * (hNote + 4) - 15,
       wNote, isWhite ? hNote : hNote / 2, isWhite ? 'white' : 'black'));
     }
    }
   }
   return '<g font-size="12">\n' + outs.join('') + '\n</g>';
  }
  /// RESPOND TO BUTTONS
  function switchInst(idShow) {
   for (let iInst = 0; iInst < instss.length; ++iInst) {
    const id = instss[iInst]['id'];
    document.getElementById(id).style.visibility =
     idShow == id ? 'visible' : 'hidden';
    document.getElementById('button_' + id).style.fill =
     idShow == id ? 'url(#grad_active)' : '#699';
   }
  }
  function rotate(isClockwise) {
   const elSvg    = document.getElementsByTagName('svg')[0];
   const elMain   = document.getElementById('main');
   const viewBoxs = elSvg.getAttribute('viewBox').split(/\s+/);
   const deg = parseInt(elMain.getAttribute('transform').match(/[-\d]+/)[0]);
   // console.log(viewBoxs, deg);
   elSvg.setAttribute('viewBox', [viewBoxs[1], viewBoxs[0],
                                  viewBoxs[3], viewBoxs[2]].join(' '));
   elMain.setAttribute('transform', 'rotate(' + (deg + (isClockwise ?
                                                        90 : -90)) + ')');
  }
  /// INITIALISE
  const outss = [`
 <a xlink:href="http://github.com/cmglee" target="github">
  <circle cy="-91" r="20" opacity="0"/>
  <text    y="-91" font-size="10" font-weight="bold" letter-spacing="-0.5"
   >&#169; 2024<tspan x="0" dy="7">cm&#610;&#671;ee</tspan></text>
 </a>
 <use xlink:href="#rotate" transform="translate(-10,88)"
                           onmousedown="rotate(false)"/>
 <use xlink:href="#rotate" transform="translate( 10,88) scale(-1,1)"
                           onmousedown="rotate(true)"/>`];
  const instss  = [{'id':'tenor'  ,'function':makeTenor  ,'xy':'-146, 92'},
                   {'id':'second' ,'function':makeSecond ,'xy':' -86, 92'},
                   {'id':'guitar' ,'function':makeGuitar ,'xy':'  86, 92'},
                   {'id':'bass'   ,'function':makeBass   ,'xy':' 146, 92'},
                   {'id':'kalimba','function':makeKalimba,'xy':' 146,-92'},
                   {'id':'piano'  ,'function':makePiano  ,'xy':'-146,-92'}];
  const tones   = ['C','C#','D','Eb','E','F','F#','G','Ab','A','Bb','B'];
  const octaves = ['', '&#8242;', '&#8243;', '&#8244;', '&#8279;'];
  const hertzC4 = 440 / Math.pow(2, 0.75); /// concert middle-C
  for (let iInst = 0; iInst < instss.length; ++iInst) {
   const insts = instss[iInst];
   const id    = insts['id'];
   outss.push(`
 <g id="${id}"></g>
 <g transform="translate(${insts['xy']})">
  <use id="button_${id}" xlink:href="#button"
       ontouchstart="switchInst('${id}');"
       onmousedown ="switchInst('${id}');"/>
  <text class="switch" y="0.7ex">${id}</text>
 </g>`);
  }
  document.getElementById('main').innerHTML = outss.join();
  for (let iData = 0; iData < instss.length; ++iData) {
   const insts = instss[iData];
   document.getElementById(insts['id']).innerHTML = insts['function']();
  }
  switchInst('tenor');
  // switchInst('second');
  // switchInst('guitar');
  // switchInst('bass');
  // switchInst('kalimba');
  // switchInst('piano');
  if (window.innerWidth < window.innerHeight) { rotate(true); }
 ]]></script>
</svg>

 </body>
</html>
